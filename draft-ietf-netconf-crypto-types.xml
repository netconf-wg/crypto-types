<?xml version='1.0'?>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<!-- <?rfc-ext allow-markup-in-artwork="yes" ?> what does this do? -->
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->
<!--<rfc xmlns:xiax="https://watsen.net/xiax" category="std" ipr="trust200902" docName="draft-ietf-netconf-crypto-types-latest">-->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude"
     category="std"
     consensus="true"
     ipr="trust200902"
     submissionType="IETF"
     docName="draft-ietf-netconf-crypto-types-latest">
    <front>
      <title abbrev="YANG Data Types and Groupings for Crypto">YANG Data Types and Groupings for Cryptography</title>
      <author initials="K." surname="Watsen" fullname="Kent Watsen">
        <organization>Watsen Networks</organization>
        <address>
          <email>kent+ietf@watsen.net</email>
        </address>
      </author>
      <date/>
      <area>Operations</area>
      <workgroup>NETCONF Working Group</workgroup>
      <abstract>
        <t>This document presents a YANG 1.1 (RFC 7950) module defining identities,
          typedefs, and groupings useful to cryptographic applications.</t>
      </abstract>
      <note title="Editorial Note (To be removed by RFC Editor)">
        <t>This draft contains placeholder values that need to be replaced
        with finalized values at the time of publication.  This note summarizes
        all of the substitutions that are needed.  No other RFC Editor
        instructions are specified elsewhere in this document.</t>
        <t>Artwork in this document contains shorthand references to drafts in
        progress.  Please apply the following replacements:
          <list style="symbols">
            <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for this draft</t>
          </list>
        </t>
        <t>Artwork in this document contains placeholder values for the date
        of publication of this draft.  Please apply the following replacement:
          <list style="symbols">
            <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
          </list>
        </t>
        <t>The "Relation to other RFCs" section <xref target="collective-effort"/> contains
          the text "one or more YANG modules" and, later, "modules".  This text is sourced
          from a file in a context where it is unknown how many modules a draft defines.
          The text is not wrong as is, but it may be improved by stating more directly how
          many modules are defined.</t>
        <t>The "Relation to other RFCs" section <xref target="collective-effort"/> contains
          a self-reference to this draft, along with a corresponding reference in
          the Appendix.  Please replace the self-reference in this section with "This RFC"
          (or similar) and remove the self-reference in the "Normative/Informative References"
          section, whichever it is in.</t>
        <t>Tree-diagrams in this draft may use the '&#92;' line-folding mode defined in RFC 8792.
          However, nicer-to-the-eye is when the '&#92;&#92;' line-folding mode is used.  The AD suggested
          suggested putting a request here for the RFC Editor to help convert "ugly" '&#92;' folded
          examples to use the '&#92;&#92;' folding mode.  "Help convert" may be interpreted as, identify
          what looks ugly and ask the authors to make the adjustment.</t>
        <t>The following Appendix section is to be removed prior to publication:
          <list style="symbols">
            <t><xref target="change-log"/>.  Change Log</t>
          </list>
        </t>
      </note>
    </front>
    <middle>
      <section title="Introduction">
        <t>This document presents a YANG 1.1 <xref target="RFC7950"/>
          module defining identities, typedefs, and groupings useful to
          cryptographic applications.</t>

INSERT_TEXT_FROM_FILE(../common-intro-snippet.xml,150)

        <section title="Adherence to the NMDA">
          <t>This document is compliant with the Network Management Datastore
            Architecture (NMDA) <xref target="RFC8342"/>. It does not define
            any protocol accessible nodes that are "config false".</t>
        </section>

        <section title="Conventions">
          <t>Various examples in this document use "BASE64VALUE=" as a
            placeholder value for binary data that has been base64
            encoded (per <xref section="9.8" target="RFC7950"/>).  This
            placeholder value is used because real base64 encoded structures
            are often many lines long and hence distracting to the example
            being presented.</t>
        </section>

      </section>

      <section title="The &quot;ietf-crypto-types&quot; Module">

        <t>This section defines a YANG 1.1 <xref target="RFC7950"/> module called
          "ietf-crypto-types".  A high-level overview of the module is provided in
          <xref target="crypto-types-overview"/>. Examples illustrating the module's use
          are provided in <xref target="crypto-types-examples">Examples</xref>. The YANG
          module itself is defined in <xref target="crypto-types-yang-module"/>.</t>

         <section title="Data Model Overview" anchor="crypto-types-overview">
           <t>This section provides an overview of the "ietf-crypto-types" module
              in terms of its features, identities, typedefs, and groupings.</t>

          <section title="Features" anchor="features" toc="exclude">
            <t>The following diagram lists all the "feature" statements
              defined in the "ietf-crypto-types" module:</t>
            <t>
              <figure>
                <artwork><![CDATA[
Features:
  +-- one-symmetric-key-format
  +-- one-asymmetric-key-format
  +-- symmetrically-encrypted-value-format
  +-- asymmetrically-encrypted-value-format
  +-- cms-enveloped-data-format
  +-- cms-encrypted-data-format
  +-- p10-csr-format
  +-- csr-generation
  +-- certificate-expiration-notification
  +-- cleartext-passwords
  +-- encrypted-passwords
  +-- cleartext-symmetric-keys
  +-- hidden-symmetric-keys
  +-- encrypted-symmetric-keys
  +-- cleartext-private-keys
  +-- hidden-private-keys
  +-- encrypted-private-keys
]]></artwork>
              </figure>
            </t>
            <!--<aside>-->
              <t>The diagram above uses syntax that is similar to but not
                the same as that in <xref target="RFC8340"/>.</t>
            <!--</aside>-->
          </section>

          <section title="Identities" anchor="identities" toc="exclude">
            <t>The following diagram illustrates the hierarchical relationship
              amongst the "identity" statements defined in the "ietf-crypto-types"
              module:</t>
            <t>
              <figure>
               <artwork><![CDATA[
Identities:
  +-- public-key-format
  |  +-- subject-public-key-info-format
  |  +-- ssh-public-key-format
  +-- private-key-format
  |  +-- rsa-private-key-format
  |  +-- ec-private-key-format
  |  +-- one-asymmetric-key-format
  |            {one-asymmetric-key-format}?
  +-- symmetric-key-format
  |  +-- octet-string-key-format
  |  +-- one-symmetric-key-format
  |            {one-symmetric-key-format}?
  +-- encrypted-value-format
  |  +-- symmetrically-encrypted-value-format
  |  |  |      {symmetrically-encrypted-value-format}?
  |  |  +-- cms-encrypted-data-format
  |  |         {cms-encrypted-data-format}?
  |  +-- asymmetrically-encrypted-value-format
  |     |      {asymmetrically-encrypted-value-format}?
  |     +-- cms-enveloped-data-format
  |            {cms-enveloped-data-format}?
  +-- csr-format
        +-- p10-csr-format {p10-csr-format?}
]]></artwork>
              </figure>
            </t>
            <!--<aside>-->
              <t>The diagram above uses syntax that is similar to but not
                the same as that in <xref target="RFC8340"/>.</t>
            <!--</aside>-->
            <t>Comments:</t>
            <ul>
              <li>The diagram shows that there are five base identities.  The
                first three identities are used to indicate the format for the
                key data, while the fourth identity is used to indicate the format
                for encrypted values.  The fifth identity is used to indicate the
                format for a certificate signing request.  The base identities are
                "abstract", in the object oriented programming sense, in that
                they only define a "class" of formats, rather than a specific
                format.</li>
              <li>The various terminal identities define specific encoding
                formats.  The derived identities defined in this document are
                sufficient for the effort described in <xref target="collective-effort"/>
                but, by nature of them being identities, additional derived
                identities MAY be defined by future efforts.</li>
              <li>Identities used to specify uncommon formats are enabled by
                "feature" statements, allowing applications to support them
                when needed.</li>
            </ul>
          </section>

          <section title="Typedefs" anchor="typedefs" toc="exclude">
            <t>The following diagram illustrates the relationship amongst the
              "typedef" statements defined in the "ietf-crypto-types" module:</t>
            <t>
              <figure>
               <artwork><![CDATA[
Typedefs:
  binary
    +-- csr-info
    +-- csr
    +-- x509
    |  +-- trust-anchor-cert-x509
    |  +-- end-entity-cert-x509
    +-- crl
    +-- ocsp-request
    +-- ocsp-response
    +-- cms
       +-- data-content-cms
       +-- signed-data-cms
       |  +-- trust-anchor-cert-cms
       |  +-- end-entity-cert-cms
       +-- enveloped-data-cms
       +-- digested-data-cms
       +-- encrypted-data-cms
       +-- authenticated-data-cms
]]></artwork>
              </figure>
            </t>
            <!--<aside>-->
              <t>The diagram above uses syntax that is similar to but not
                the same as that in <xref target="RFC8340"/>.</t>
            <!--</aside>-->
            <t>Comments:</t>
            <ul>
              <li>All the typedefs defined in the "ietf-crypto-types" module
                extend the "binary" type defined in <xref target="RFC7950"/>.</li>
              <li>Additionally, all the typedefs define a type for encoding an ASN.1
                <xref target="ITU.X680.2021"/> structure using DER <xref target="ITU.X690.2021"/>.</li>
              <li>The "trust-anchor-*" and "end-entity-*" typedefs are syntactically
                identical to their base typedefs and only distinguish themselves
                by the expected nature of their content.  These typedefs are
                defined to facilitate common modeling needs.</li>
            </ul>
          </section>

          <section title="Groupings" toc="exclude">
            <t>The "ietf-crypto-types" module defines the following "grouping" statements:</t>
            <ul spacing="compact">
              <li>encrypted-value-grouping</li>
              <li>password-grouping</li>
              <li>symmetric-key-grouping</li>
              <li>public-key-grouping</li>
              <li>private-key-grouping</li>
              <li>asymmetric-key-pair-grouping</li>
              <li>certificate-expiration-grouping</li>
              <li>trust-anchor-cert-grouping</li>
              <li>end-entity-cert-grouping</li>
              <li>generate-csr-grouping</li>
              <li>asymmetric-key-pair-with-cert-grouping</li>
              <li>asymmetric-key-pair-with-certs-grouping</li>
            </ul>
            <t>Each of these groupings are presented in the following subsections.</t>

            <section title='The "encrypted-value-grouping" Grouping' anchor="encrypted-value-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "encrypted-value-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-encrypted-value-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "encrypted-by" node is an empty container (difficult to
                  see in the diagram) that a consuming module MUST augment key
                  references into.  The "ietf-crypto-types" module is unable to
                  populate this container as the module only defines groupings.
                  <xref target="ct-usage"/> presents an example illustrating
                  a consuming module populating the "encrypted-by" container.</li>
                <li>
                  <t>The "encrypted-value" node is the value, encrypted by the
                    key referenced by the "encrypted-by" node, and encoded in
                    the format appropriate for the kind of key it was encrypted
                    by.</t>
                  <ul>
                    <li>If the value is encrypted by a symmetric key, then the
                      encrypted value is encoded using the format associated with
                      the "symmetrically-encrypted-value-format" identity.</li>
                    <li>If the value is encrypted by an asymmetric key, then the
                      encrypted value is encoded using the format associated with 
                      the "asymmetrically-encrypted-value-format" identity.</li>
                  </ul>
                  <t>See <xref target="identities"/> for information about
                    the "format" identities.</t>
                </li>
              </ul>
            </section>

            <section title="The &quot;password-grouping&quot; Grouping" anchor="password-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "password-grouping" grouping.  This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-password-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "password-grouping" enables configuration of credentials needed to
                  authenticate to a remote system.  The 'ianach:crypt-hash' typedef from
                  <xref target="RFC7317"/> should be used instead when needing to
                  configure a password to authencate a local account.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "encrypted-value-grouping" grouping is discussed in
                      <xref target="encrypted-value-grouping"/>.</li>
                  </ul>
                </li>
                <li>The "choice" statement enables the password data to be cleartext or
                  encrypted, as follows:
                  <ul spacing="compact">
                    <li>The "cleartext-password" node can encode any cleartext value.</li>
                    <li>The "encrypted-password" node's structure is discussed in
                      <xref target="encrypted-value-grouping"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;symmetric-key-grouping&quot; Grouping" anchor="symmetric-key-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "symmetric-key-grouping" grouping.  This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-symmetric-key-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "encrypted-value-grouping" grouping is discussed in
                      <xref target="encrypted-value-grouping"/>.</li>
                  </ul>
                </li>
                <li>The "key-format" node is an identity-reference to the "symmetric-key-format"
                  abstract base identity discussed in <xref target="identities"/>,
                    enabling the symmetric key to be encoded using any of the formats
                    defined by the derived identities.</li>
                <li>The "choice" statement enables the private key data to be cleartext,
                  encrypted, or hidden, as follows:
                  <ul spacing="compact">
                    <li>The "cleartext-symmetric-key" node can encode any cleartext key value.</li>
                    <li>The "hidden-symmetric-key" node is of type "empty" as the real
                      value cannot be presented via the management interface.</li>
                    <li>The "encrypted-symmetric-key" node's structure is discussed in
                      <xref target="encrypted-value-grouping"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;public-key-grouping&quot; Grouping" anchor="public-key-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "public-key-grouping" grouping.  This tree diagram does
                not expand any internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-public-key-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>The "public-key-format" node is an identity-reference to the "public-key-format"
                  abstract base identity discussed in <xref target="identities"/>,
                  enabling the public key to be encoded using any of the formats
                  defined by the derived identities.  </li>
                <li>The "public-key" node is the public key data in the selected format.
                  No "choice" statement is used to hide or encrypt the public key data
                  because it is unnecessary to do so for public keys.</li>
              </ul>
            </section>

            <section title="The &quot;private-key-grouping&quot; Grouping" anchor="private-key-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "private-key-grouping" grouping. This tree diagram does not expand the internally
                used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-private-key-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "encrypted-value-grouping" grouping is discussed in
                      <xref target="encrypted-value-grouping"/>.</li>
                  </ul>
                </li>
                <li>The "private-key-format" node is an identity-reference to the "private-key-format"
                    abstract base identity discussed in <xref target="identities"/>,
                    enabling the private key to be encoded using any of the formats
                    defined by the derived identities.</li>
                <li>The "choice" statement enables the private key data to be cleartext,
                  encrypted, or hidden, as follows:
                  <ul spacing="compact">
                    <li>The "cleartext-private-key" node can encode any cleartext key value.</li>
                    <li>The "hidden-private-key" node is of type "empty" as the real
                      value cannot be presented via the management interface.</li>
                    <li>The "encrypted-private-key" node's structure is discussed in
                      <xref target="encrypted-value-grouping"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;asymmetric-key-pair-grouping&quot; Grouping" anchor="asymmetric-key-pair-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "asymmetric-key-pair-grouping" grouping. This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-asymmetric-key-pair-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "public-key-grouping" grouping is discussed in
                      <xref target="public-key-grouping"/>.</li>
                    <li>The "private-key-grouping" grouping is discussed in
                      <xref target="private-key-grouping"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;certificate-expiration-grouping&quot; Grouping" anchor="certificate-expiration-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "certificate-expiration-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-certificate-expiration-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>This grouping's only purpose is to define the "certificate-expiration"
                  notification statement, used by the groupings defined in
                  <xref target="trust-anchor-cert-grouping"/> and
                  <xref target="end-entity-cert-grouping"/>.</li>
                <li>The "certificate-expiration" notification enables servers to
                  notify clients when certificates are nearing expiration.</li>
                <li>The "expiration-date" node indicates when the designated
                  certificate will (or did) expire.</li>
                <li>Identification of the certificate that is expiring is built
                  into the notification itself.  For an example, please see
                  <xref target="cert-exp-notif-ex"/>.</li>
              </ul>
            </section>

            <section title="The &quot;trust-anchor-cert-grouping&quot; Grouping" anchor="trust-anchor-cert-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "trust-anchor-cert-grouping" grouping.  This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-trust-anchor-cert-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "certificate-expiration-grouping" grouping is discussed in
                      <xref target="certificate-expiration-grouping"/>.</li>
                  </ul>
                </li>
                <li>The "cert-data" node contains a chain of one or more certificates
                  containing at most one self-signed certificates (the “root” certificate),
                  encoded using a "signed-data-cms" typedef discussed in <xref target="typedefs"/>.</li>
              </ul>
            </section>

            <section title="The &quot;end-entity-cert-grouping&quot; Grouping" anchor="end-entity-cert-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "end-entity-cert-grouping" grouping.  This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-end-entity-cert-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "certificate-expiration-grouping" grouping is discussed in
                      <xref target="certificate-expiration-grouping"/>.</li>
                  </ul>
                </li>
                <li>The "cert-data" node contains a chain of one or more certificates
                  containing at most one certificate that is neither self-signed nor
                  having Basic constraint "CA true”, encoded using a "signed-data-cms"
                  typedef discussed in <xref target="typedefs"/>.</li>
              </ul>
            </section>

            <section title="The &quot;generate-csr-grouping&quot; Grouping" anchor="generate-csr-grouping">
              <t>The following tree diagram <xref target="RFC8340"/> illustrates the
                "generate-csr-grouping" grouping:</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-generate-csr-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>This grouping's only purpose is to define the "generate-certificate-signing-request"
                  action statement, used by the groupings defined in <xref target="asymmetric-key-pair-with-cert-grouping"/>
                  and <xref target="asymmetric-key-pair-with-certs-grouping"/>.</li>
                <li>This action takes as input a "csr-info" type and returns a
                  "csr" type, both of which are discussed in <xref target="typedefs"/>.</li>
                <li>For an example, please see <xref target="gcsr-action"/>.</li>
              </ul>
            </section>

            <section title="The &quot;asymmetric-key-pair-with-cert-grouping&quot; Grouping" anchor="asymmetric-key-pair-with-cert-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "asymmetric-key-pair-with-cert-grouping" grouping.  This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-asymmetric-key-pair-with-cert-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>This grouping defines an asymmetric key with at most one associated
                  certificate, a commonly needed combination in protocol models.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "asymmetric-key-pair-grouping" grouping is discussed in
                      <xref target="asymmetric-key-pair-grouping"/>.</li>
                    <li>The "end-entity-cert-grouping" grouping is discussed in
                      <xref target="end-entity-cert-grouping"/>.</li>
                    <li>The "generate-csr-grouping" grouping is discussed in
                      <xref target="generate-csr-grouping"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>

            <section title="The &quot;asymmetric-key-pair-with-certs-grouping&quot; Grouping" anchor="asymmetric-key-pair-with-certs-grouping">
              <t>This section presents a tree diagram <xref target="RFC8340"/> illustrating the
                "asymmetric-key-pair-with-certs-grouping" grouping. This tree diagram does
                not expand the internally used grouping statement(s):</t>
              <t>
                <figure>
                 <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/tree-asymmetric-key-pair-with-certs-grouping.no-expand.txt)
]]></artwork>
                </figure>
              </t>
              <t>Comments:</t>
              <ul>
                <li>This grouping defines an asymmetric key with one or more
                  associated certificates, a commonly needed combination in
                  configuration models.</li>
                <li>For the referenced grouping statement(s):
                  <ul spacing="compact">
                    <li>The "asymmetric-key-pair-grouping" grouping is discussed in
                      <xref target="asymmetric-key-pair-grouping"/>.</li>
                    <li>The "end-entity-cert-grouping" grouping is discussed in
                      <xref target="end-entity-cert-grouping"/>.</li>
                    <li>The "generate-csr-grouping" grouping is discussed in
                      <xref target="generate-csr-grouping"/>.</li>
                  </ul>
                </li>
              </ul>
            </section>
          </section>

          <section title="Protocol-accessible Nodes" toc="exclude">
            <t>The "ietf-crypto-types" module does not contain any protocol-accessible nodes,
              but the module needs to be "implemented", as described in <relref
              section="5.6.5" target="RFC7950"/>, in order for the identities in
              <xref target="identities"/> to be defined.</t>
          </section>

        </section>



        <section title="Example Usage" anchor="crypto-types-examples">

          <section title="The &quot;symmetric-key-grouping&quot;,
            &quot;asymmetric-key-pair-with-certs-grouping&quot;, and &quot;password-grouping&quot; Groupings" anchor="ct-usage" toc="exclude">
            <t>The following non-normative module is constructed in order to illustrate the
              use of the "symmetric-key-grouping" (<xref target="symmetric-key-grouping"/>), the
              "asymmetric-key-pair-with-certs-grouping" (<xref target="asymmetric-key-pair-with-certs-grouping"/>),
              and the "password-grouping" (<xref target="password-grouping"/>) grouping statements.</t>
            <t>Notably, this example module and associated configuration data illustrates that
              a hidden private key (ex-hidden-asymmetric-key)
              has been used to encrypt a symmetric key (ex-encrypted-one-symmetric-based-symmetric-key)
              that has been used to encrypt another private key (ex-encrypted-rsa-based-asymmetric-key).
              Additionally, the symmetric key is also used to encrypt a password (ex-encrypted-password).</t>
            <section title="Example Module" toc="exclude">
              <t>
                <figure>
                  <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ex-crypto-types-usage@YYYY-MM-DD.yang)
]]></artwork>
                </figure>
              </t>
            </section>
            <section title="Tree Diagram for the Example Module" toc="exclude">
              <t>The tree diagram <xref target="RFC8340"/> for this example module follows:</t>
              <t>
                <figure>
                  <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-crypto-types-usage-tree.txt)
]]></artwork>
                </figure>
              </t>
            </section>
            <section title="Usage Example for the Example Module" toc="exclude">
              <t>Finally, the following example illustrates various symmetric and asymmetric keys
                as they might appear in configuration:</t>
              <t>
                <figure>
                  <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-crypto-types-usage.xml)
]]></artwork>
                </figure>
              </t>
            </section>
          </section>

          <section title="The &quot;generate-certificate-signing-request&quot; Action" anchor="gcsr-action" toc="exclude">
            <t>The following example illustrates the "generate-certificate-signing-request"
              action, discussed in <xref target="generate-csr-grouping"/>, with the NETCONF protocol.</t>
            <t>
              <figure>
                <preamble>REQUEST</preamble>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-crypto-types-gcsr-rpc.xml)
]]></artwork>
              </figure>
              <figure>
                <preamble>RESPONSE</preamble>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-crypto-types-gcsr-rpc-reply.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="The &quot;certificate-expiration&quot; Notification" anchor="cert-exp-notif-ex" toc="exclude">
            <t>The following example illustrates the "certificate-expiration"
              notification, discussed in <xref target="certificate-expiration-grouping"/>,
              with the NETCONF protocol.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-crypto-types-ce-notification.xml)
]]></artwork>
              </figure>
            </t>
          </section>
        </section>

        <section title="YANG Module" anchor="crypto-types-yang-module">
          <t>This module has normative references to <xref target="RFC2119"/>,
          <xref target="RFC2986"/>, <xref target="RFC4253"/>, <xref target="RFC5280"/>,
          <xref target="RFC5652"/>, <xref target="RFC5915"/>, <xref target="RFC5958"/>,
          <xref target="RFC6031"/>, <xref target="RFC6960"/>,
          <xref target="RFC6991"/>, <xref target="RFC7093"/>, <xref target="RFC8017"/>, 
          <xref target="RFC8174"/>, <xref target="RFC8341"/>,
          and <xref target="ITU.X690.2021"/>.</t>
          
          <t>
            <figure>
            <preamble>&lt;CODE BEGINS&gt; file "ietf-crypto-types@YYYY-MM-DD.yang"</preamble>
             <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-crypto-types@YYYY-MM-DD.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title="Security Considerations">
        <section title="No Support for CRMF">
          <t>This document uses PKCS #10 <xref target="RFC2986"/> for the
          "generate-certificate-signing-request" action.  The use of Certificate
          Request Message Format (CRMF) <xref target="RFC4211"/> was considered,
          but it was unclear if there was market demand for it.  If it is desired
          to support CRMF in the future, a backwards compatible solution can be
          defined at that time.</t>
        </section>

        <section title="No Support for Key Generation">
          <t>Early revisions of this document included "rpc" statements for
            generating symmetric and asymmetric keys.  These statements were
            removed due to an inability to obtain consensus for how to
            generically identify the key-algorithm to use.  Hence, the
            solution presented in this document only supports keys to be
            configured via an external client.</t>
          <t>Separate protocol-specific modules can present protocol-specific
            key-generating RPCs (e.g., the "generate-public-key" RPC in 
            <xref target="I-D.ietf-netconf-ssh-client-server"/>
            and <xref target="I-D.ietf-netconf-tls-client-server"/>).</t>
        </section>

        <section title="Unconstrained Public Key Usage">
          <t>This module defines the "public-key-grouping" grouping, which
            enables the configuration of public keys without constraints on
            their usage, e.g., what operations the key is allowed to be used
            for (encryption, verification, both).</t>
          <t>The "asymmetric-key-pair-grouping" grouping uses the aforementioned
            "public-key-grouping" grouping, and carries the same traits.</t>
          <t>The "asymmetric-key-pair-with-cert-grouping" grouping uses the
            aforementioned "asymmetric-key-pair-grouping" grouping, whereby
            associated certificates MUST constrain the usage of the public
            key according to local policy.</t>
        </section>

        <section title="Unconstrained Private Key Usage">
          <t>This module defines the "asymmetric-key-pair-grouping" grouping,
            which enables the configuration of private keys without
            constraints on their usage, e.g., what operations the key is
            allowed to be used for (e.g., signature, decryption, both).</t>
          <t>The "asymmetric-key-pair-with-cert-grouping" uses the aforementioned
            "asymmetric-key-pair-grouping" grouping, whereby configured certificates
            (e.g., identity certificates) may constrain the use of the public
            key according to local policy.</t>
        </section>

        <section title="Cleartext Passwords and Keys">
          <t>The module contained within this document enables, only when
          specific "feature" statements are enabled, for the cleartext
          value of passwords and keys to be stored in the configuration
          database.  Storing cleartext values for passwords and keys is
          NOT RECOMMENDED.</t>
        </section>

        <section title="Encrypting Passwords and Keys">
          <t>The module contained within this document enables cleartext
            passwords and keys to be encrypted via another key, either
            symmetric or asymmetric.  Both formats use a CMS structure
            (EncryptedData and EnvelopedData respectively), which allows
            any encryption algorithm to be used.</t>
          <t>To securely encrypt a password or key with a symmetric key, a
            proper block cipher mode such as an AEAD or CBC MUST be used. This
            ensures that a random IV is part of the input, which guarantees
            that the output for encrypting the same password or key still
            produces a different unpredictable ciphertext. This avoids leaking
            that some encrypted keys or passwords are the same and makes it
            much harder to pre-generate rainbow tables to brute force attack
            weak passwords. The ECB block cipher mode MUST NOT be used.</t>
        </section>

        <section title="Deletion of Cleartext Key Values">
          <t>This module defines storage for cleartext key values that SHOULD
            be zeroized when deleted, so as to prevent the remnants of their
            persisted storage locations from being analyzed in any meaningful
            way.</t>
          <t>The cleartext key values are the "cleartext-symmetric-key" node defined in the
            "symmetric-key-grouping" grouping (<xref target="symmetric-key-grouping"/>)
              and the "cleartext-private-key" node defined in the "asymmetric-key-pair-grouping"
              grouping ("<xref target="asymmetric-key-pair-grouping"/>).</t>
        </section>

        <section title="Considerations for the &quot;ietf-crypto-types&quot; YANG Module">
          <t>This section follows the template defined in <xref section="3.7.1" target="RFC8407"/>.</t>
          <t>The YANG module in this document defines "grouping" statements
            that are designed to be accessed via YANG based management
            protocols, such as NETCONF <xref target="RFC6241"/> and RESTCONF
            <xref target="RFC8040"/>.  Both of these protocols have
            mandatory-to-implement secure transport layers (e.g., SSH, TLS)
            with mutual authentication.</t>

          <t>The Network Access Control Model (NACM) <xref target="RFC8341"/>
            provides the means to restrict access for particular users to a
            pre-configured subset of all available protocol operations and
            content.</t>

          <t>Since the module in this document only defines groupings,
            these considerations are primarily for the designers of other
            modules that use these groupings.</t>

          <t>Some of the readable data nodes defined in this YANG module
            may be considered sensitive or vulnerable in some network
            environments. It is thus important to control read access
            (e.g., via get, get-config, or notification) to these
            data nodes. The following subtrees and data nodes have particular
            sensitivity/vulnerability:
            <list style="symbols">
              <t>The "cleartext-password" node:
                <ul empty="true">
                  <li>The "cleartext-password" node defined in the "password-grouping"
                    grouping is additionally sensitive to read operations such that,
                    in normal use cases, it should never be returned to a client.
                    For this reason, the NACM extension "default-deny-all" has been
                    applied to it.</li>
                </ul>
              </t>
              <t>The "cleartext-symmetric-key" node:
                <ul empty="true">
                  <li>The "cleartext-symmetric-key" node defined in the "symmetric-key-grouping"
                    grouping is additionally sensitive to read operations such that,
                    in normal use cases, it should never be returned to a client.
                    For this reason, the NACM extension "default-deny-all" has been
                    applied to it.</li>
                </ul>
              </t>
              <t>The "cleartext-private-key" node:
                <ul empty="true">
                  <li>The "cleartext-private-key" node defined in the "asymmetric-key-pair-grouping"
                    grouping is additionally sensitive to read operations such that, in
                    normal use cases, it should never be returned to a client.  For this
                    reason, the NACM extension "default-deny-all" has been applied.</li>
                </ul>
              </t>
              <t>The "cert-data" node:
                <ul empty="true">
                  <li>The "cert-data" node, defined in both the "trust-anchor-cert-grouping"
                    and "end-entity-cert-grouping" groupings, is additionally sensitive to
                    read operations, as certificates may provide insight into which other
                    resources/applications/servers this particular server communicates with,
                    as well as potentially  divulge personally identifying information (e.g.,
                    end-entity certificates).  For this reason, the NACM extension
                    "default-deny-all" has been applied.</li>
                </ul>
              </t>
            </list>
          </t>

          <t>All the writable data nodes defined by all the groupings defined
            in this module may be considered sensitive or vulnerable in
            some network environments.  For instance, even the modification
            of a public key or a certificate can dramatically alter the
            implemented security policy.  For this reason, the NACM extension
            "default-deny-write" has been applied to all the data nodes
            defined in the module.</t>

          <t>Some of the operations in this YANG module may be considered
            sensitive or vulnerable in some network environments. It is
            thus important to control access to these operations. These
            are the operations and their sensitivity/vulnerability:
            <list style="symbols">
              <t>generate-certificate-signing-request:
                <ul empty="true">
                  <li>This "action" statement SHOULD only be executed by authorized
                    users.  For this reason, the NACM extension "default-deny-all"
                    has been applied.  Note that NACM uses "default-deny-all"
                    to protect "RPC" and "action" statements; it does not define,
                    e.g., an extension called "default-deny-execute".</li>
                  <li>For this action, it is RECOMMENDED that implementations assert
                    channel binding <xref target="RFC5056"/>, so as to ensure
                    that the application layer that sent the request is the same
                    as the device authenticated when the secure transport layer
                    was established.</li>
                </ul>
              </t>
            </list>
          </t>
        </section>
      </section>

      <section title="IANA Considerations">
        <section title='The "IETF XML" Registry'>
          <t>This document registers one URI in the "ns" subregistry
          of the "IETF XML" registry <xref target="RFC3688"/>.  Following
          the format in <xref target="RFC3688"/>, the following
          registration is requested:</t>
          <t>
            <figure>
              <artwork>
   URI: urn:ietf:params:xml:ns:yang:ietf-crypto-types
   Registrant Contact: The IESG
   XML: N/A, the requested URI is an XML namespace.
</artwork>
            </figure>
          </t>
        </section>
        <section title='The "YANG Module Names" Registry'>
          <t>This document registers one YANG module in the
          "YANG Module Names" registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          following registration is requested:</t>
          <t>
            <figure>
              <artwork>
   name:         ietf-crypto-types
   namespace:    urn:ietf:params:xml:ns:yang:ietf-crypto-types
   prefix:       ct
   reference:    RFC AAAA
</artwork>
            </figure>
          </t>
        </section>
      </section>
    </middle>
    <back>
      <references title="Normative References">
        <?rfc include="reference.RFC.2119.xml"?>
        <!--<?rfc include="reference.RFC.2404.xml"?>-->
        <!--<?rfc include="reference.RFC.3565.xml"?>
        <?rfc include="reference.RFC.3686.xml"?>
        <?rfc include="reference.RFC.4106.xml"?>-->
        <?rfc include="reference.RFC.4253.xml"?>
        <!--<?rfc include="reference.RFC.4279.xml"?>
        <?rfc include="reference.RFC.4309.xml"?>
        <?rfc include="reference.RFC.4494.xml"?>
        <?rfc include="reference.RFC.4543.xml"?>
        <?rfc include="reference.RFC.4868.xml"?>-->
        <?rfc include="reference.RFC.5280.xml"?>
        <?rfc include="reference.RFC.5652.xml"?>
        <!--<?rfc include="reference.RFC.5656.xml"?>-->
        <?rfc include="reference.RFC.5958.xml"?>
        <?rfc include="reference.RFC.6031.xml"?>
        <!--<?rfc include="reference.RFC.6187.xml"?>-->
        <?rfc include="reference.RFC.6960.xml"?>
        <?rfc include="reference.RFC.6991.xml"?>
        <?rfc include="reference.RFC.7093.xml"?>
        <!--<?rfc include="reference.RFC.7919.xml"?>-->
        <?rfc include="reference.RFC.7950.xml"?>
        <?rfc include="reference.RFC.8017.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>
        <!--<?rfc include="reference.RFC.8268.xml"?>
        <?rfc include="reference.RFC.8332.xml"?>-->
        <?rfc include="reference.RFC.8341.xml"?>
        <!--<?rfc include="reference.RFC.8422.xml"?>
        <?rfc include="reference.RFC.8446.xml"?>-->

        <reference anchor="ITU.X680.2021" target="https://www.itu.int/rec/T-REC-X.680-202102-I">
          <front>
            <title>Information technology - Abstract Syntax Notation One (ASN.1):
              Specification of basic notation
            </title>
            <author>
              <organization>International Telecommunication Union</organization>
            </author>
            <date month="February" year="2021"/>
          </front>
          <seriesInfo name="ITU-T Recommendation X.680," value="ISO/IEC 8824-1:2021"/>
	    </reference>
        <reference anchor="ITU.X690.2021" target="https://www.itu.int/rec/T-REC-X.690-202102-I">
          <front>
            <title>Information Technology - ASN.1 encoding rules: Specification of Basic
            Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished
            Encoding Rules (DER)</title>
            <author>
              <organization>International Telecommunication Union</organization>
            </author>
            <date month="February" year="2021"/>
          </front>
          <seriesInfo name="ITU-T Recommendation X.690," value="ISO/IEC 8825-1:2021"/>
	    </reference>
      </references>
      <references title="Informative References">
        <?rfc include="reference.RFC.2986.xml"?>
        <!--<?rfc include="reference.RFC.3174.xml"?>-->
        <?rfc include="reference.RFC.3688.xml"?>
        <?rfc include="reference.RFC.4211.xml"?>
        <!--<?rfc include="reference.RFC.4493.xml"?>-->
        <?rfc include="reference.RFC.5056.xml"?>
        <?rfc include="reference.RFC.5915.xml"?>
        <?rfc include="reference.RFC.6020.xml"?>
        <!--<?rfc include="reference.RFC.6234.xml"?>-->
        <?rfc include="reference.RFC.6241.xml"?>
        <!--<?rfc include="reference.RFC.6239.xml"?>
        <?rfc include="reference.RFC.6507.xml"?>
        <?rfc include="reference.RFC.8032.xml"?>-->
        <?rfc include="reference.RFC.7317.xml"?>
        <?rfc include="reference.RFC.8040.xml"?>
        <?rfc include="reference.RFC.8340.xml"?>
        <?rfc include="reference.RFC.8407.xml"?>
        <!--<?rfc include="reference.RFC.8439.xml"?>-->
        <?rfc include="reference.RFC.8342.xml"?>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-crypto-types.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-trust-anchors.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-keystore.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tcp-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-ssh-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-tls-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-http-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-netconf-client-server.xml"/>
        <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netconf-restconf-client-server.xml"/>
      </references>

      <section title="Change Log" anchor="change-log">
        <section title="I-D to 00">
          <t>
            <list style="symbols">
              <t>Removed groupings and notifications.</t>
              <t>Added typedefs for identityrefs.</t>
              <t>Added typedefs for other RFC 5280 structures.</t>
              <t>Added typedefs for other RFC 5652 structures.</t>
              <t>Added convenience typedefs for RFC 4253, RFC 5280, and RFC 5652.</t>
            </list>
          </t>
        </section>
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>Moved groupings from the draft-ietf-netconf-keystore here.</t>
            </list>
          </t>
        </section>
        <section title="01 to 02">
          <t>
            <list style="symbols">
              <t>Removed unwanted "mandatory" and "must" statements.</t>
              <t>Added many new crypto algorithms (thanks Haiguang!)</t>
              <t>Clarified in asymmetric-key-pair-with-certs-grouping,
                 in certificates/certificate/name/description, that
                 if the name MUST NOT match the name of a certificate
                 that exists independently in &lt;operational&gt;, enabling
                 certs installed by the manufacturer (e.g., an IDevID).</t>
            </list>
          </t>
        </section>
        <section title="02 to 03">
          <t>
            <list style="symbols">
              <t>renamed base identity 'asymmetric-key-encryption-algorithm' to 'asymmetric-key-algorithm'.</t>
              <t>added new 'asymmetric-key-algorithm' identities for secp192r1, secp224r1, secp256r1,
                 secp384r1, and secp521r1.</t>
               <t>removed 'mac-algorithm' identities for mac-aes-128-ccm, mac-aes-192-ccm, mac-aes-256-ccm,
                 mac-aes-128-gcm, mac-aes-192-gcm, mac-aes-256-gcm, and mac-chacha20-poly1305.</t>
               <t>for all -cbc and -ctr identities, renamed base identity 'symmetric-key-encryption-algorithm'
                 to 'encryption-algorithm'.</t>
               <t>for all -ccm and -gcm identities, renamed base identity 'symmetric-key-encryption-algorithm'
                 to 'encryption-and-mac-algorithm' and renamed the identity to remove the "enc-" prefix.</t>
               <t>for all the 'signature-algorithm' based identities, renamed from 'rsa-*' to 'rsassa-*'.</t>
               <t>removed all of the "x509v3-" prefixed 'signature-algorithm' based identities.</t>
               <t>added 'key-exchange-algorithm' based identities for 'rsaes-oaep' and 'rsaes-pkcs1-v1_5'.</t>
               <t>renamed typedef 'symmetric-key-encryption-algorithm-ref' to 'symmetric-key-algorithm-ref'.</t>
               <t>renamed typedef 'asymmetric-key-encryption-algorithm-ref' to 'asymmetric-key-algorithm-ref'.</t>
               <t>added typedef 'encryption-and-mac-algorithm-ref'.</t>
               <t>Updated copyright date, boilerplate template, affiliation, and folding algorithm.</t>
            </list>
          </t>
        </section>
        <section title="03 to 04">
          <t>
            <list style="symbols">
              <t>ran YANG module through formatter.</t>
            </list>
          </t>
        </section>
        <section title="04 to 05">
          <t>
            <list style="symbols">
              <t>fixed broken symlink causing reformatted YANG module to not show.</t>
            </list>
          </t>
        </section>
        <section title="05 to 06">
          <t>
            <list style="symbols">
              <t>Added NACM annotations.</t>
              <t>Updated Security Considerations section.</t>
              <t>Added 'asymmetric-key-pair-with-cert-grouping' grouping.</t>
              <t>Removed text from 'permanently-hidden' enum regarding
                such keys not being backed up or restored.</t>
              <t>Updated the boilerplate text in module-level "description"
                statement to match copyeditor convention.</t>
              <t>Added an explanation to the 'public-key-grouping' and
                'asymmetric-key-pair-grouping' statements as for why the
                nodes are not mandatory (e.g., because they may exist only
                in &lt;operational&gt;.</t>
              <t>Added 'must' expressions to the 'public-key-grouping' and
                'asymmetric-key-pair-grouping' statements ensuring sibling
                nodes are either all exist or do not all exist.</t>
              <t>Added an explanation to the 'permanently-hidden' that the
                value cannot be configured directly by clients and servers
                MUST fail any attempt to do so.</t>
              <t>Added 'trust-anchor-certs-grouping' and 'end-entity-certs-grouping'
                (the plural form of existing groupings).</t>
              <t>Now states that keys created in &lt;operational&gt; by the
                *-hidden-key actions are bound to the lifetime of the parent
                'config true' node, and that subsequent invocations of either
                action results in a failure.</t>
            </list>
          </t>
        </section>
        <section title="06 to 07">
          <t>
            <list style="symbols">
              <t>Added clarifications that implementations SHOULD assert that
                configured certificates contain the matching public key.</t>
              <t>Replaced the 'generate-hidden-key' and 'install-hidden-key' actions
                with special 'crypt-hash' -like input/output values.</t>
            </list>
          </t>
        </section>
        <section title="07 to 08">
          <t>
            <list style="symbols">
              <t>Removed the 'generate-key and 'hidden-key' features.</t>
              <t>Added grouping symmetric-key-grouping</t>
              <t>Modified 'asymmetric-key-pair-grouping' to have a 'choice'
                 statement for the keystone module to augment into, as well
                 as replacing the 'union' with leafs (having different NACM
                 settings.</t>
            </list>
          </t>
        </section>
        <section title="08 to 09">
          <t>
            <list style="symbols">
              <t>Converting algorithm from identities to enumerations.</t>
            </list>
          </t>
        </section>
        <section title="09 to 10">
          <t>
            <list style="symbols">
              <t>All the below changes are to the algorithm enumerations defined in ietf-crypto-types.</t>
              <t>Add in support for key exchange over x.25519 and x.448 based on RFC 8418.</t>
              <t>Add in SHAKE-128, SHAKE-224, SHAKE-256, SHAKE-384 and SHAKE 512</t>
              <t>Revise/add in enum of signature algorithm for x25519 and x448</t>
              <t>Add in des3-cbc-sha1 for IPSec</t>
              <t>Add in sha1-des3-kd for IPSec</t>
              <t>Add in  definit for rc4-hmac and rc4-hmac-exp. These two algorithms have been deprecated in RFC 8429. But some existing draft in i2nsf may still want to use them.</t>
              <t>Add x25519 and x448 curve for asymmetric algorithms</t>
              <t>Add signature algorithms ed25519, ed25519-cts, ed25519ph</t>
              <t>add signature algorithms ed448, ed448ph</t>
              <t>Add in rsa-sha2-256 and rsa-sha2-512 for SSH protocols (rfc8332)</t>
            </list>
          </t>
        </section>
        <section title="10 to 11">
          <t>
            <list style="symbols">
              <t>Added a "key-format" identity.</t>
              <t>Added symmetric keys to the example in <xref target="crypto-types-examples"/>.</t>
            </list>
          </t>
        </section>
        <section title="11 to 12">
          <t>
            <list style="symbols">
              <t>Removed all non-essential (to NC/RC) algorithm types.</t>
              <t>Moved remaining algorithm types each into its own module.</t>
              <t>Added a 'config false' "algorithms-supported" list to each of the algorithm-type modules.</t>
            </list>
          </t>
        </section>
        <section title="12 to 13">
          <t>
            <list style="symbols">
              <t>Added the four features: "[encrypted-]one-[a]symmetric-key-format", each protecting a 'key-format' identity of the same name.</t>
              <t>Added 'must' expressions asserting that the 'key-format' leaf exists whenever a non-hidden key is specified.</t>
              <t>Improved the 'description' statements and added 'reference' statements for the 'key-format' identities.</t>
              <t>Added a questionable forward reference to "encrypted-*" leafs in a couple 'when' expressions.</t>
              <t>Did NOT move "config false" alg-supported lists to SSH/TLS drafts.</t>
            </list>
          </t>
        </section>
        <section title="13 to 14">
          <t>
            <list style="symbols">
              <t>Resolved the "FIXME: forward ref" issue by modulating 'must', 'when', and 'mandatory' expressions.</t>
              <t>Moved the 'generatesymmetric-key' and 'generate-asymmetric-key' actions from ietf-keystore to
                ietf-crypto-types, now as RPCs.</t>
              <t>Cleaned up various description statements and removed lingering FIXMEs.</t>
              <t>Converted the "iana-&lt;alg-type&gt;-algs" YANG modules to IANA registries with
                instructions for how to generate modules from the registries, whenever they may
                be updated.</t>
            </list>
          </t>
        </section>
        <section title="14 to 15">
          <t>
            <list style="symbols">
              <t>Removed the IANA-maintained registries for symmetric, asymmetric, and hash algorithms.</t>
              <t>Removed the "generate-symmetric-key" and "generate-asymmetric-key" RPCs.</t>
              <t>Removed the "algorithm" node in the various symmetric and asymmetric key groupings.</t>
              <t>Added 'typedef csr' and 'feature certificate-signing-request-generation'.</t>
              <t>Refined a usage of "end-entity-cert-grouping" to make the "cert" node mandatory true.</t>
              <t>Added a "Note to Reviewers" note to first page.</t>
            </list>
          </t>
        </section>
        <section title="15 to 16">
          <t>
            <list style="symbols">
              <t>Updated draft title (refer to "Groupings" too).</t>
              <t>Removed 'end-entity-certs-grouping' as it wasn't being used anywhere.</t>
              <t>Removed 'trust-anchor-certs-grouping' as it was no longer being used
                after modifying 'inline-or-truststore-certs-grouping' to use lists (not
                leaf-lists).</t>
              <t>Renamed "cert" to "cert-data" in trust-anchor-cert-grouping.</t>
              <t>Added "csr-info" typedef, to complement the existing "csr" typedef.</t>
              <t>Added "ocsp-request" and "ocsp-response" typedefs, to complement
                the existing "crl" typedef.</t>
              <t>Added "encrypted" cases to both symmetric-key-grouping and
                asymmetric-key-pair-grouping (Moved from Keystore draft).</t>
              <t>Expanded "Data Model Overview section(s) [remove "wall" of tree diagrams].</t>
              <t>Updated the Security Considerations section.</t>
            </list>
          </t>
        </section>
        <section title="16 to 17">
          <t>
            <list style="symbols">
              <t>[Re]-added a "Strength of Keys Configured" Security Consideration</t>
              <t>Prefixed "cleartext-" in the "key" and "private-key" node names.</t>
            </list>
          </t>
        </section>
        <section title="17 to 18">
          <t>
            <list style="symbols">
              <t>Fixed issues found by the SecDir review of the "keystore" draft.</t>
              <t>Added "password-grouping", discussed during the IETF 108 session.</t>
            </list>
          </t>
        </section>
        <section title="18 to 19">
          <t>
            <list style="symbols">
              <t>Added a "Unconstrained Public Key Usage" Security Consideration to address
                 concern raised by SecDir of the 'truststore' draft.</t>
              <t>Added a "Unconstrained Private Key Usage" Security Consideration to address
                concern raised by SecDir of the 'truststore' draft.</t>
              <t>Changed the encryption strategy, after conferring with Russ Housley.</t>
              <t>Added a "password-grouping" example to the "crypto-types-usage" example.</t>
              <t>Added an "Encrypting Passwords" section to Security Consideration.</t>
              <t>Addressed other comments raised by YANG Doctor.</t>
            </list>
          </t>
        </section>
        <section title="19 to 20">
          <t>
            <list style="symbols">
              <t>Nits found via YANG Doctors reviews.</t>
              <t>Aligned modules with `pyang -f` formatting.</t>
            </list>
          </t>
        </section>
        <section title="20 to 21">
          <t>
            <list style="symbols">
              <t>Replaced "base64encodedvalue==" with "BASE64VALUE=".</t>
              <t>Accommodated SecDir review by Valery Smyslov.</t>
            </list>
          </t>
        </section>
        <section title="21 to 22">
          <t>
            <list style="symbols">
              <t>fixup the 'WG Web' and 'WG List' lines in YANG module(s)</t>
              <t>fixup copyright (i.e., s/Simplified/Revised/) in YANG module(s)</t>
              <t>added 'hidden-keys' feature.</t>
            </list>
          </t>
        </section>
        <section title="22 to 23">
          <t>
            <list style="symbols">
              <t>Fixed an example to reference correct key.</t>
              <t>Fixed an example to not have line-returns around the encoding for a binary value.</t>
            </list>
          </t>
        </section>
        <section title="23 to 24">
          <t>
            <list style="symbols">
              <t>Added mandatory leaf "csr-format" to action "generate-csr".</t>
              <t>s/certificate-signing-request/csr/g in the YANG module.</t>
            </list>
          </t>
        </section>
        <section title="24 to 25">
          <t>
            <list style="symbols">
              <t>Updated per Shepherd reviews impacting the suite of drafts.</t>
            </list>
          </t>
        </section>
        <section title="25 to 26">
          <t>
            <list style="symbols">
              <t>Updated per Shepherd reviews impacting the suite of drafts.</t>
            </list>
          </t>
        </section>
        <section title="26 to 27">
          <t>
            <list style="symbols">
              <t>Updated per Tom Petch and AD reviews.</t>
              <t>Renamed numerous "feature" statements and some "grouping" statements (in YANG)</t>
              <t>Added "csr-format" and "p10-csr-format" identities to doc (they were already in YANG)</t>
              <t>Clarified that the 'rsa-private-key-format' and 'ec-private-key-format' formats must be encoded using DER</t>
              <t>Added 'if-feature cleartext-passwords' statement to 'case cleartext-password' in grouping 'password-grouping'.</t>
              <t>Added 'if-feature cleartext-keys' statement to 'case cleartext-key' in grouping 'symmetric-key-grouping'.</t>
              <t>Added 'if-feature cleartext-cleartext-private-keys' statement to 'case cleartext-private-key' in grouping 'asymmetric-key-grouping'.</t>
              <t>Updated Section titles.</t>
              <t>Clarified Security Considerations about the "generate-public-key" RPCs.</t>
            </list>
          </t>
        </section>
        <section title="27 to 28">
          <t>
            <list style="symbols">
              <t>Mostly addresses AD review comments.</t>
              <t>Also addresses on-list comment regarding public-keys being "mandatory true."</t>
              <t>Added note to Editor to fix line foldings.</t>
              <t>Factored 'private-key-grouping' from 'asymmetric-key-pair-grouping'.</t>
              <t>Made public-key in 'asymmetric-key-pair-grouping' be "mandatory false".</t>
              <t>Renamed 'encrypted-by-choice-grouping' to 'encrypted-by-grouping'.</t>
            </list>
          </t>
        </section>
        <section title="28 to 29">
          <t>
            <list style="symbols">
              <t>Addresses Gen-ART review by Dale Worley.</t>
              <t>Addresses review by Tom Petch.</t>
            </list>
          </t>
        </section>
        <section title="29 to 30">
          <t>  
            <list style="symbols">
              <t>Addresses 1st-round of IESG reviews.</t>
            </list>
          </t> 
        </section>
        <section title="30 to 32">
          <t>  
            <list style="symbols">
              <t>Addresses issues found in OpsDir of the ssh-client-server draft.</t>
              <t>Removed "Strength of Keys Conveyed" section.</t>
              <t>Renamed Security Considerations section s/Template for/Considerations for/</t>
              <t>Improved Security Consideration for 'cert-data' node.</t>
            </list>
          </t> 
        </section>
        <section title="32 to 34">
          <t>  
            <list style="symbols">
              <t>Nothing changed.  Only bumped for automation...</t>
            </list>
          </t> 
        </section>
      </section>

      <section title="Acknowledgements" numbered="no">
        <t>The authors would like to thank the following for
        lively discussions on list and in the halls (ordered
          by first name):
          Balázs Kovács,
          Carsten Bormann,
          Dale Worley,
          Eric Voit,
          Éric Vyncke,
          Francesca Palombini,
          Jürgen Schönwälder,
          Lars Eggert,
          Liang Xia,
          Martin Björklund,
          Mahesh Jethanandani,
          Murray Kucherawy,
          Nick Hancock,
          Orie Steele,
          Paul Wouters,
          Rich Salz,
          Rifaat Shekh-Yusef,
          Rob Wilton,
          Roman Danyliw,
          Russ Housley,
          Sandra Murphy,
          Tom Petch,
          Valery Smyslov,
          Wang Haiguang,
          Warren Kumari,
          and Zaheduzzaman Sarker.
       </t>
     </section>

   </back>
</rfc>
